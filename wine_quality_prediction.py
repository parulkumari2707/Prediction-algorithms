# -*- coding: utf-8 -*-
"""wine_quality_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xhg4w36DycW57kV1kj0vmidM0JE_Kkto
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score
from sklearn.metrics import mean_squared_error
import xgboost as xgb
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
wine_data = pd.read_csv("/content/drive/MyDrive/winequality-red.csv")

wine_data.info()

# Assuming dataset has columns for features and a column for wine quality
X = wine_data.drop(columns=['quality'])  # Features
y = wine_data['quality']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Alternatively, you can use XGBoost for model training
model = xgb.XGBRegressor()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Convert predicted values to discrete classes
y_pred_class = [round(pred) for pred in y_pred]

# Convert true values to discrete classes
y_test_class = [round(val) for val in y_test]

# Evaluate the model
accuracy = accuracy_score(y_test_class, y_pred_class)
f1 = f1_score(y_test_class, y_pred_class, average='weighted')
recall = recall_score(y_test_class, y_pred_class, average='weighted')
precision = precision_score(y_test_class, y_pred_class, average='weighted')
mse = mean_squared_error(y_test, y_pred)

print("Accuracy:", accuracy)
print("F1 Score:", f1)
print("Recall:", recall)
print("Precision:", precision)
print("Mean Squared Error (XGBoost):", mse)

# Show predicted values
predicted_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(predicted_df.head(10))

# Calculate residuals
residuals = y_test - y_pred

# Box Plot of Residuals
plt.figure(figsize=(6, 6))
sns.boxplot(residuals)
plt.xlabel('Residuals')
plt.title('Box Plot of Residuals')
plt.show()

# Histogram of Residuals
plt.figure(figsize=(6, 6))
sns.histplot(residuals, kde=True)
plt.xlabel('Residuals')
plt.title('Histogram of Residuals')
plt.show()

