# -*- coding: utf-8 -*-
"""Heart_diease_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102b0Ls8QEDQpqdyAC4FY7djcIE8fQF2j
"""

import pandas as pd
import pylab as pl
import numpy as np
import scipy.optimize as opt
import statsmodels.api as sm
from sklearn import preprocessing
'exec(% matplotlib inline)'
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, f1_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report

# dataset
data = pd.read_csv("/content/drive/MyDrive/framingham.csv")

data.info()

data.head()

data.describe()

data.isnull().sum()

data.drop(['education'], inplace = True, axis = 1)
data.rename(columns ={'male':'Sex_male'}, inplace = True)

# removing NaN / NULL values
data.dropna(axis = 0, inplace = True)
print(data.head(),'\n', data.shape)

# counting no. of patients affected with CHD
plt.figure(figsize=(6,4))
sn.countplot(x='TenYearCHD', data=data,palette="BuGn_r")
plt.show()

plt.figure(figsize=(6,4))
laste = data['TenYearCHD'].plot()
plt.show(laste)

#splitting the data
X = np.asarray(data[['age', 'Sex_male', 'cigsPerDay', 'totChol', 'sysBP', 'glucose']])
y = np.asarray(data['TenYearCHD'])

# normalization of the dataset
X = preprocessing.StandardScaler().fit(X).transform(X)

# Train-and-Test -Split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

logreg = LogisticRegression()
logreg.fit(X_train, y_train)

#predicting
y_pred = logreg.predict(X_test)

# Evaluation and accuracy
print('')
print('Accuracy of the model is = ', accuracy_score(y_test, y_pred))
print('Precision of model is = ', precision_score(y_test,y_pred))
print('F1_score of model = ',f1_score(y_test,y_pred))

rf = RandomForestClassifier()
rf.fit(X_train, y_train)

score = rf.score(X_test,y_test)*100
print('Accuracy of the model is = ', score)

#confusion matrix
cm = confusion_matrix(y_test, y_pred)
conf_matrix = pd.DataFrame(data = cm, columns = ['Predicted:0', 'Predicted:1'], index =['Actual:0', 'Actual:1'])

#Plotting confusion matrix
plt.figure(figsize = (6, 4))
sn.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = "Greens")
plt.show()

print('The details for confusion matrix is =')
print (classification_report(y_test, y_pred))

